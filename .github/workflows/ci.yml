name: CI Pipeline

# When to run this workflow
on:
  push:
    branches: [ main, develop ]  # Run on pushes to main or develop
  pull_request:
    branches: [ main ]           # Run on PRs to main

# Define the jobs
jobs:
  test:
    runs-on: ubuntu-latest      # Use Ubuntu virtual machine
    
    strategy:
      matrix:
        python-version: ["3.10", "3.11"]
    
    steps:
    # Step 1: Get your code
    - name: Checkout code
      uses: actions/checkout@v4
    
    # Step 2: Set up Python
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    # Step 3: Cache dependencies (faster builds)
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    # Step 4: Install dependencies
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    # Step 5: Run linting (code quality)
    - name: Lint with flake8
      run: |
        pip install flake8
        # Stop build if there are Python syntax errors
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Treat all other issues as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    # Step 6: Run tests
    - name: Run tests with pytest
      run: |
        pytest tests/ -v --cov=app --cov-report=xml --cov-report=term-missing
    
  # Security check job
  security:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
    
    - name: Run safety check (dependency vulnerabilities)
      run: safety check
    
    - name: Run bandit (security linting)
      run: bandit -r app/ -f json -o bandit-report.json || true